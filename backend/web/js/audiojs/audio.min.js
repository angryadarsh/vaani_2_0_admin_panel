(function(h, o, g) {
  var currentSpeedIdx = 1;
  var p = function() {
    for (var b = /audio(.min)?.js.*/, a = document.getElementsByTagName("script"), c = 0, d = a.length; c < d; c++) {
      var e = a[c].getAttribute("src");
      if (b.test(e)) return e.replace(b, "")
    }
  }();
  g[h] = {
    instanceCount: 0,
    instances: {},
    flashSource: '      <object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" id="$1" width="1" height="1" name="$1" style="/* position: absolute; left: -1px; */">         <param name="movie" value="$2?playerInstance=' + h + '.instances[\'$1\']&datetime=$3">         <param name="allowscriptaccess" value="always">         <embed name="$1" src="$2?playerInstance=' +
      h + '.instances[\'$1\']&datetime=$3" width="1" height="1" allowscriptaccess="always">       </object>',
    settings: {
      autoplay: false,
      loop: false,
      preload: true,
      imageLocation: p + "player-graphics.gif",
      swfLocation: p + "audiojs.swf",
      useFlash: function() {
        var b = document.createElement("audio");
        return !(b.canPlayType && b.canPlayType("audio/mpeg;").replace(/no/, ""))
      }(),
      hasFlash: function() {
        if (navigator.plugins && navigator.plugins.length && navigator.plugins["Shockwave Flash"]) return true;
        else if (navigator.mimeTypes && navigator.mimeTypes.length) {
          var b =
            navigator.mimeTypes["application/x-shockwave-flash"];
          return b && b.enabledPlugin
        } else try {
          new ActiveXObject("ShockwaveFlash.ShockwaveFlash");
          return true
        } catch (a) {}
        return false
      }(),
      createPlayer: {
        markup: '<div class="main-play-pause"><div class="play-pause"><p class="play"></p><p class="pause"></p><p class="loading"></p><p class="error"></p></div><div class="scrubber"><div class="progress"></div><div id="audio-js-progress" class="loaded"></div></div><div class="time"> <em class="played">00:00</em>/<strong class="duration">00:00</strong></div><div class="play-controls"><span style="cursor:pointer;"><i class="fas fa-fast-backward audio-backward"></i></span><span style="cursor:pointer;"><i class="fas fa-fast-forward audio-fastforward"></i></span><span style="cursor:pointer;width: 28px;margin-top: 10px;color: #f9f9f9;font-size: 12px;" id="audio-SpeedControl" title="Speed" class="changePlaybackSpeed">1x</span></div><div class="error-message"></div></div> <div class="add-highligher" style="display:none"><span id="add_marker_span_main" class="add-marker-span" style="border: blackborder: solid;padding: 9px;">MM <input onblur="javascript:slice_timemarker(\'audio_marker_minute_main\');"  maxlength="2" id="audio_marker_minute_main" placeholder="00" name="audio_marker_minute_main" type="number" min="0" max="60" class="form-input audio-minute"> SS <input class="form-input audio-seconds" onblur="javascript:slice_timemarker(\'audio_marker_seconds_main\');" placeholder="00" id="audio_marker_seconds_main" name="audio_marker_seconds_main"  maxlength="2" type="number" min="0" max="60"> <button type="button" id="add-marker-btn" class="btn btn-primary" onclick="add_marker_span();">+ Add Highlight</button></span></div>',
        playPauseClass: "play-pause",
        scrubberClass: "scrubber",
        progressClass: "progress",
        loaderClass: "loaded",
        timeClass: "time",
        durationClass: "duration",
        playedClass: "played",
        errorMessageClass: "error-message",
        playingClass: "playing",
        loadingClass: "loading",
        errorClass: "error",
        fastForwardClass: "audio-fastforward",
        rewindClass: "audio-backward",
        changeSpeedClass: "changePlaybackSpeed",
        playControlClass: "play-controls" 
      },
        css: '.fas{/* font-size: 12px; margin-top: 12px; margin-right: 6px; color: #f9f9f9; */} .add-highligher{margin-left: 10px; float:left} .add-marker-span input[type=number]:focus {background: antiquewhite;} .added-marker-span{padding: 4px 10px; border: 1px solid #0077dd; display: inline-block; border-radius: 20px; margin-right: 12px; position: relative; margin-top: 5px; margin-bottom: 5px;} .add-marker-span input::-webkit-outer-spin-button, .add-marker-span input::-webkit-inner-spin-button {-webkit-appearance: none; margin: 0;} .add-marker-span input[type=number] { -moz-appearance: textfield; border: 1px solid #cfcfcf; width: 36px; height: 36px;  text-align: center;border-radius: 10px;}  .add-marker-span input[type=number]:first-child{margin-right: 5px;}  .added-marker-span .btn-danger{font-size: 9px; padding: 1px 5px; position: absolute; top: -7px;} .add-marker-span .btn-primary{margin-left:5px}    .audiojs audio { /* position: absolute; left: -1px; */ display: none; } .time-marked{font-size: 13px; }  .mark-count{font-size: 11px; position:relative; padding-left: 6px;  margin-left: 2px; color: #07d;} .mark-count::before{content: ""; position: absolute; left: 0; width: 0.5px; height: 21px; background: #07d;}        .audiojs {height: 36px; overflow: hidden;}   .audiojs .main-play-pause{width: 510px; float: left; background: #404040; background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0, #444), color-stop(0.5, #555), color-stop(0.51, #444), color-stop(1, #444));           background-image: -moz-linear-gradient(center top, #444 0%, #555 50%, #444 51%, #444 100%);           -webkit-box-shadow: 1px 1px 8px rgba(0, 0, 0, 0.3); -moz-box-shadow: 1px 1px 8px rgba(0, 0, 0, 0.3);           -o-box-shadow: 1px 1px 8px rgba(0, 0, 0, 0.3); box-shadow: 1px 1px 8px rgba(0, 0, 0, 0.3); font-family: monospace; font-size: 12px;}       .audiojs .play-pause { width: 40px; height: 40px; padding: 4px 6px; margin: 0px; float: left; overflow: hidden; border-right: 1px solid #000; }         .audiojs p { display: none; width: 25px; height: 40px; margin: 0px; cursor: pointer; }         .audiojs .play { display: block; }         .audiojs .scrubber { position: relative; float: left; width: 280px; background: #5a5a5a; height: 14px; margin: 10px; border-top: 1px solid #3f3f3f; border-left: 0px; border-bottom: 0px; overflow: hidden; }         .audiojs .progress { position: absolute; top: 0px; left: 0px; height: 14px; width: 0px; background: #ccc; z-index: 1;           background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0, #ccc), color-stop(0.5, #ddd), color-stop(0.51, #ccc), color-stop(1, #ccc));           background-image: -moz-linear-gradient(center top, #ccc 0%, #ddd 50%, #ccc 51%, #ccc 100%); }         .audiojs .loaded { position: absolute; top: 0px; left: 0px; height: 14px; width: 0px; background: #000;           background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0, #222), color-stop(0.5, #333), color-stop(0.51, #222), color-stop(1, #222));           background-image: -moz-linear-gradient(center top, #222 0%, #333 50%, #222 51%, #222 100%); }         .audiojs .time { float: left; height: 36px; line-height: 36px; margin: 0px 0px 0px 6px; padding: 0px 6px 0px 6px; border-left: 1px solid #000; color: #ddd; text-shadow: 1px 1px 0px rgba(0, 0, 0, 0.5); }         .audiojs .time em { padding: 0px 2px 0px 0px; color: #f9f9f9; font-style: normal; }         .audiojs .time strong { padding: 0px 0px 0px 2px; font-weight: normal; }         .audiojs .error-message { float: left; display: none; margin: 0px 10px; height: 36px; width: 400px; overflow: hidden; line-height: 36px; white-space: nowrap; color: #fff;           text-overflow: ellipsis; -o-text-overflow: ellipsis; -icab-text-overflow: ellipsis; -khtml-text-overflow: ellipsis; -moz-text-overflow: ellipsis; -webkit-text-overflow: ellipsis; }         .audiojs .error-message a { color: #eee; text-decoration: none; padding-bottom: 1px; border-bottom: 1px solid #999; white-space: wrap; }                 .audiojs .play { background: url("$1") -2px -1px no-repeat; }         .audiojs .loading { background: url("$1") -2px -31px no-repeat; }         .audiojs .error { background: url("$1") -2px -61px no-repeat; }         .audiojs .pause { background: url("$1") -2px -91px no-repeat; }                 .playing .play, .playing .loading, .playing .error { display: none; }         .playing .pause { display: block; }                 .loading .play, .loading .pause, .loading .error { display: none; }         .loading .loading { display: block; }                 .error .time, .error .play, .error .pause, .error .scrubber, .error .loading { display: none; }         .error .error { display: block; }         .error .play-pause p { cursor: auto; }         .error .error-message { display: block; } ',
      trackEnded: function() {},
      flashError: function() {
        var b = this.settings.createPlayer,
          a = j(b.errorMessageClass, this.wrapper),
          c = 'Missing <a href="http://get.adobe.com/flashplayer/">flash player</a> plugin.';
        if (this.mp3) c += ' <a href="' + this.mp3 + '">Download audio file</a>.';
        g[h].helpers.removeClass(this.wrapper, b.loadingClass);
        g[h].helpers.addClass(this.wrapper, b.errorClass);
        a.innerHTML = c
      },
      loadError: function() {
        var b = this.settings.createPlayer,
          a = j(b.errorMessageClass, this.wrapper);
        g[h].helpers.removeClass(this.wrapper,
          b.loadingClass);
        g[h].helpers.addClass(this.wrapper, b.errorClass);
        a.innerHTML = 'Error loading: "' + this.mp3 + '"'
      },
      init: function() {
        g[h].helpers.addClass(this.wrapper, this.settings.createPlayer.loadingClass)
      },
      loadStarted: function() {
        var b = this.settings.createPlayer,
          a = j(b.durationClass, this.wrapper),
          c = Math.floor(this.duration / 60),
          d = Math.floor(this.duration % 60);
        g[h].helpers.removeClass(this.wrapper, b.loadingClass);
        a.innerHTML = (c < 10 ? "0" : "") + c + ":" + (d < 10 ? "0" : "") + d
      },
      loadProgress: function(b) {
        var a = this.settings.createPlayer,
          c = j(a.scrubberClass, this.wrapper);
        j(a.loaderClass, this.wrapper).style.width = c.offsetWidth * b + "px"
      },
      playPause: function() {
        this.playing ? this.settings.play() : this.settings.pause()
      },
      play: function() {
        // document.getElementsByClassName("play-controls")[0].style.display = "block";
        g[h].helpers.addClass(this.wrapper, this.settings.createPlayer.playingClass)
      },
      pause: function() {
        // document.getElementsByClassName("play-controls")[0].style.display = "none";
        g[h].helpers.removeClass(this.wrapper, this.settings.createPlayer.playingClass)
      },
      updatePlayhead: function(b) {
        var a = this.settings.createPlayer,
          c = j(a.scrubberClass, this.wrapper);
        j(a.progressClass, this.wrapper).style.width =
          c.offsetWidth * b + "px";
        a = j(a.playedClass, this.wrapper);
        c = this.duration * b;
        b = Math.floor(c / 60);
        c = Math.floor(c % 60);
        a.innerHTML = (b < 10 ? "0" : "") + b + ":" + (c < 10 ? "0" : "") + c
      },
      addMarkers: function(markers_arr,span_cnt = 1) {
        //getting duration
        let duration = document.getElementsByTagName("audio")[0].duration;
        var audio_seekID = document.getElementById('audio-js-progress');
        // Set the markers when we CAN know the duration of the video.
        // Add each marker to the #seekbar element.
        let main_position = 0;
        markers_arr.forEach(function(position) {
          main_position = position;
          if(position.toString().indexOf('.') > -1) {
            let aud_minute = parseFloat(position.toString().substring(0, position.toString().indexOf('.')) * 60);
            let aud_sec = position.toString().substring(position.toString().indexOf('.')+1);
            if(aud_sec.length == 1) {
                aud_sec = parseFloat(aud_sec) * 10;
            } else {
              aud_sec = parseFloat(aud_sec);
            }
            position = parseFloat(aud_minute) + aud_sec;
          } else {
            position = parseFloat(position*60);
          }
          // Is position within range of the duration?
          if (position <= duration) {
            // Calculate position in percentage..
            var left_markPos = (position / duration) * 100;
            //progressbar width is 280px so calculate px margin
            left_markPos = Math.ceil((left_markPos * 280) / 100);
            // ..and add the marker to the #seekbar.
            var audioplayer_marker = document.createElement('div');
            audioplayer_marker.classList.add('audio-marker');
            audioplayer_marker.classList.add('highlighter-' + span_cnt);
            audioplayer_marker.classList.add(main_position);
            audioplayer_marker.style.cssText  = 'width: 2px;z-index: 999;background: #FCB616;height: 14px;position: absolute;left: ' + left_markPos + 'px;';
            // ..and add the marker to the #seekbar.
            audio_seekID.appendChild(audioplayer_marker);
            span_cnt++;
          }
        });
      },
      enableAddMarker: function() {
        $(".add-highligher").show();
          let addMarkerMarkup = '<div id="marker-div" style="margin:5px 0;display:none" data-markercount="0"></div>';
          $('.audiojs').after(addMarkerMarkup);
        // document.getElementById("marker-div").style.display = "block";
        // $('#marker-div').slideDown();
      }
    },
    create: function(b, a) {
      a = a || {};
      return b.length ? this.createAll(a, b) : this.newInstance(b, a)
    },
    createAll: function(b, a) {
      var c = a || document.getElementsByTagName("audio"),
        d = [];
      b = b || {};
      for (var e = 0, i = c.length; e < i; e++) d.push(this.newInstance(c[e], b));
      return d
    },
    newInstance: function(b, a) {
      var c = this.helpers.clone(this.settings),
        d = "audiojs" + this.instanceCount,
        e = "audiojs_wrapper" + this.instanceCount;
      this.instanceCount++;
      if (b.getAttribute("autoplay") != null) c.autoplay = true;
      if (b.getAttribute("loop") != null) c.loop = true;
      if (b.getAttribute("preload") == "none") c.preload = false;
      a && this.helpers.merge(c, a);
      if (c.createPlayer.markup) b = this.createPlayer(b, c.createPlayer, e);
      else b.parentNode.setAttribute("id", e);
      e = new g[o](b, c);
      c.css && this.helpers.injectCss(e, c.css);
      if (c.useFlash && c.hasFlash) {
        this.injectFlash(e, d);
        this.attachFlashEvents(e.wrapper, e)
      } else c.useFlash && !c.hasFlash &&
        this.settings.flashError.apply(e);
      if (!c.useFlash || c.useFlash && c.hasFlash) this.attachEvents(e.wrapper, e);
      return this.instances[d] = e
    },
    createPlayer: function(b, a, c) {
      var d = document.createElement("div"),
        e = b.cloneNode(true);
      d.setAttribute("class", "audiojs");
      d.setAttribute("className", "audiojs");
      d.setAttribute("id", c);
      if (e.outerHTML && !document.createElement("audio").canPlayType) {
        e = this.helpers.cloneHtml5Node(b);
        d.innerHTML = a.markup;
        d.appendChild(e);
        b.outerHTML = d.outerHTML;
        d = document.getElementById(c)
      } else {
        d.appendChild(e);
        d.innerHTML += a.markup;
        b.parentNode.replaceChild(d, b)
      }
      return d.getElementsByTagName("audio")[0]
    },
    attachEvents: function(b, a) {
      if (a.settings.createPlayer) {
        var c = a.settings.createPlayer,
          d = j(c.playPauseClass, b),
          e = j(c.scrubberClass, b),
          x = j(c.fastForwardClass, b),
          y = j(c.rewindClass, b),
          z = j(c.changeSpeedClass, b);
        g[h].events.addListener(d, "click", function() {
          a.playPause.apply(a)
        });
        g[h].events.addListener(e, "click", function(i) {
          i = i.clientX;
          var f = this,
            k = 0;
          if (f.offsetParent) {
            do k += f.offsetLeft; while (f = f.offsetParent)
          }
          a.skipTo((i - k) / e.offsetWidth)
        });
        //added below event mapping on 05/08/21 by jitendra for fast forward and rewind function
        g[h].events.addListener(x, "click", function(i) {
          a.fastForward.apply(a)
        });
        g[h].events.addListener(y, "click", function(i) {
          a.rewind.apply(a)
        });
        g[h].events.addListener(z, "click", function(i) {
          a.changeSpeed.apply(a)
        });
        if (!a.settings.useFlash) {
          g[h].events.trackLoadProgress(a);
          g[h].events.addListener(a.element, "timeupdate", function() {
            a.updatePlayhead.apply(a)
          });
          g[h].events.addListener(a.element, "ended", function() {
            a.trackEnded.apply(a)
          });
          g[h].events.addListener(a.source, "error", function() {
            clearInterval(a.readyTimer);
            clearInterval(a.loadTimer);
            a.settings.loadError.apply(a)
          })
        }
      }
    },
    attachFlashEvents: function(b, a) {
      a.swfReady = false;
      a.load = function(c) {
        a.mp3 = c;
        a.swfReady && a.element.load(c)
      };
      a.loadProgress = function(c, d) {
        a.loadedPercent = c;
        a.duration = d;
        a.settings.loadStarted.apply(a);
        a.settings.loadProgress.apply(a, [c])
      };
      a.skipTo = function(c) {
        if (!(c > a.loadedPercent)) {
          a.updatePlayhead.call(a, [c]);
          a.element.skipTo(c)
        }
      };
      a.updatePlayhead = function(c) {
        a.settings.updatePlayhead.apply(a, [c])
      };
      a.play = function() {
        if (!a.settings.preload) {
          a.settings.preload = true;
          a.element.init(a.mp3)
        }
        a.playing = true;
        a.element.pplay();
        a.settings.play.apply(a)
      };
      a.pause = function() {
        a.playing = false;
        a.element.ppause();
        a.settings.pause.apply(a)
      };
      a.setVolume = function(c) {
        a.element.setVolume(c)
      };
      a.loadStarted = function() {
        a.swfReady =
          true;
        a.settings.preload && a.element.init(a.mp3);
        a.settings.autoplay && a.play.apply(a);
      }
    },
    injectFlash: function(b, a) {
      var c = this.flashSource.replace(/\$1/g, a);
      c = c.replace(/\$2/g, b.settings.swfLocation);
      c = c.replace(/\$3/g, +new Date + Math.random());
      var d = b.wrapper.innerHTML,
        e = document.createElement("div");
      e.innerHTML = c + d;
      b.wrapper.innerHTML = e.innerHTML;
      b.element = this.helpers.getSwf(a)
    },
    helpers: {
      merge: function(b, a) {
        for (attr in a)
          if (b.hasOwnProperty(attr) || a.hasOwnProperty(attr)) b[attr] = a[attr]
      },
      clone: function(b) {
        if (b ==
          null || typeof b !== "object") return b;
        var a = new b.constructor,
          c;
        for (c in b) a[c] = arguments.callee(b[c]);
        return a
      },
      addClass: function(b, a) {
        RegExp("(\\s|^)" + a + "(\\s|$)").test(b.className) || (b.className += " " + a)
      },
      removeClass: function(b, a) {
        b.className = b.className.replace(RegExp("(\\s|^)" + a + "(\\s|$)"), " ")
      },
      injectCss: function(b, a) {
        for (var c = "", d = document.getElementsByTagName("style"), e = a.replace(/\$1/g, b.settings.imageLocation), i = 0, f = d.length; i < f; i++) {
          var k = d[i].getAttribute("title");
          if (k && ~k.indexOf("audiojs")) {
            f = d[i];
            if (f.innerHTML === e) return;
            c = f.innerHTML;
            break
          }
        }
        d = document.getElementsByTagName("head")[0];
        i = d.firstChild;
        f = document.createElement("style");
        if (d) {
          f.setAttribute("type", "text/css");
          f.setAttribute("title", "audiojs");
          if (f.styleSheet) f.styleSheet.cssText = c + e;
          else f.appendChild(document.createTextNode(c + e));
          i ? d.insertBefore(f, i) : d.appendChild(styleElement)
        }
      },
      cloneHtml5Node: function(b) {
        var a = document.createDocumentFragment(),
          c = a.createElement ? a : document;
        c.createElement("audio");
        c = c.createElement("div");
        a.appendChild(c);
        c.innerHTML = b.outerHTML;
        return c.firstChild
      },
      getSwf: function(b) {
        b = document[b] || window[b];
        return b.length > 1 ? b[b.length - 1] : b
      }
    },
    events: {
      memoryLeaking: false,
      listeners: [],
      addListener: function(b, a, c) {
        if (b.addEventListener) b.addEventListener(a, c, false);
        else if (b.attachEvent) {
          this.listeners.push(b);
          if (!this.memoryLeaking) {
            window.attachEvent("onunload", function() {
              if (this.listeners)
                for (var d = 0, e = this.listeners.length; d < e; d++) g[h].events.purge(this.listeners[d])
            });
            this.memoryLeaking = true
          }
          b.attachEvent("on" +
            a,
            function() {
              c.call(b, window.event)
            })
        }
      },
      trackLoadProgress: function(b) {
        if (b.settings.preload) {
          var a, c;
          b = b;
          var d = /(ipod|iphone|ipad)/i.test(navigator.userAgent);
          a = setInterval(function() {
            if (b.element.readyState > -1) d || b.init.apply(b);
            if (b.element.readyState > 1) {
              b.settings.autoplay && b.play.apply(b);
              clearInterval(a);
              c = setInterval(function() {
                b.loadProgress.apply(b);
                b.loadedPercent >= 1 && clearInterval(c)
              })
            }
          }, 10);
          b.readyTimer = a;
          b.loadTimer = c
        }
      },
      purge: function(b) {
        var a = b.attributes,c;
        if (a)
          for (c=0;c<a.length;c+=1)
            if (typeof b[a[c].name] === "function") b[a[c].name] = null;
        if (a = b.childNodes)
          for (c=0;c<a.length;c+=1) purge(b.childNodes[c])
      },
      ready: function() {
        return function(b) {
          var a = window,
            c = false,
            d = true,
            e = a.document,
            i = e.documentElement,
            f = e.addEventListener ? "addEventListener" : "attachEvent",
            k = e.addEventListener ? "removeEventListener" : "detachEvent",
            n = e.addEventListener ? "" : "on",
            m = function(l) {
              if (!(l.type == "readystatechange" && e.readyState != "complete")) {
                (l.type == "load" ? a : e)[k](n + l.type, m, false);
                if (!c && (c = true)) b.call(a, l.type ||
                  l)
              }
            },
            q = function() {
              try {
                i.doScroll("left")
              } catch (l) {
                setTimeout(q, 50);
                return
              }
              m("poll")
            };
          if (e.readyState == "complete") b.call(a, "lazy");
          else {
            if (e.createEventObject && i.doScroll) {
              try {
                d = !a.frameElement
              } catch (r) {}
              d && q()
            }
            e[f](n + "DOMContentLoaded", m, false);
            e[f](n + "readystatechange", m, false);
            a[f](n + "load", m, false)
          }
        }
      }()
    }
  };
  g[o] = function(b, a) {
    this.element = b;
    this.wrapper = b.parentNode;
    this.source = b.getElementsByTagName("source")[0] || b;
    this.mp3 = function(c) {
      var d = c.getElementsByTagName("source")[0];
      return c.getAttribute("src") ||
        (d ? d.getAttribute("src") : null)
    }(b);
    this.settings = a;
    this.loadStartedCalled = false;
    this.loadedPercent = 0;
    this.duration = 1;
    this.playing = false
  };
  g[o].prototype = {
    updatePlayhead: function() {
      this.settings.updatePlayhead.apply(this, [this.element.currentTime / this.duration])
    },
    skipTo: function(b) {
      //below if block commented by Jitendra to enable click on marker
      // if (!(b > this.loadedPercent)) {
        this.element.currentTime = this.duration * b;
        this.updatePlayhead()
      // }
    },
    load: function(b) {
      this.loadStartedCalled = false;
      this.source.setAttribute("src", b);
      this.element.load();
      this.mp3 = b;
      g[h].events.trackLoadProgress(this)
    },
    loadError: function() {
      this.settings.loadError.apply(this)
    },
    init: function() {
      this.settings.init.apply(this)
    },
    loadStarted: function() {
      if (!this.element.duration) return false;
      this.duration = this.element.duration;
      this.updatePlayhead();
      this.settings.loadStarted.apply(this)
    },
    loadProgress: function() {
      if (this.element.buffered != null && this.element.buffered.length) {
        if (!this.loadStartedCalled) this.loadStartedCalled = this.loadStarted();
        this.loadedPercent = this.element.buffered.end(this.element.buffered.length - 1) / this.duration;
        this.settings.loadProgress.apply(this, [this.loadedPercent])
      }
    },
    playPause: function() {
      this.playing ? this.pause() : this.play()
    },
    //added below function on 05/08/21 by jitendra for fast forward and rewind function
    fastForward: function() {
      if (window.HTMLAudioElement) {
        try {
          let dur_var = this.element.duration;
          dur_var = dur_var/10;
          this.element.currentTime += dur_var;
          //this.element.currentTime += 30.0;
        } catch (e) {
          // Fail silently but show in F12 developer tools console
          if (window.console && console.error("Error: "+e));
        }
      }
    },
    rewind: function() {
      if (window.HTMLAudioElement) {
        try {
          let dur_var = this.element.duration;
          dur_var = dur_var/10;
          this.element.currentTime -= dur_var;
          //this.element.currentTime -= 30.0;
        } catch (e) {
          // Fail silently but show in F12 developer tools console
          if (window.console && console.error("Error: "+e));
        }
      }
    },
    changeSpeed: function() {
      currentSpeedIdx = (currentSpeedIdx >= 4 ) ? 0.5 : (currentSpeedIdx == 2) ? (currentSpeedIdx + 2) : (currentSpeedIdx + 0.5);
      this.element.playbackRate = currentSpeedIdx;
      jQuery("#audio-SpeedControl").html(currentSpeedIdx + 'x');
    },
    play: function() {
      /(ipod|iphone|ipad)/i.test(navigator.userAgent) && this.element.readyState == 0 && this.init.apply(this);
      if (!this.settings.preload) {
        this.settings.preload = true;
        this.element.setAttribute("preload", "auto");
        g[h].events.trackLoadProgress(this)
      }
      this.playing = true;
      this.element.play();
      this.settings.play.apply(this)
    },
    pause: function() {
      this.playing = false;
      this.element.pause();
      this.settings.pause.apply(this)
    },
    setVolume: function(b) {
      this.element.volume = b
    },
    trackEnded: function() {
      this.skipTo.apply(this, [0]);
      this.settings.loop || this.pause.apply(this);
      this.settings.trackEnded.apply(this)
    }
  };
  var j = function(b, a) {
    var c = [];
    a = a || document;
    if (a.getElementsByClassName) c = a.getElementsByClassName(b);
    else {
      var d, e, i = a.getElementsByTagName("*"),
        f = RegExp("(^|\\s)" + b + "(\\s|$)");
      d = 0;
      for (e = i.length; d < e; d++) f.test(i[d].className) && c.push(i[d])
    }
    return c.length > 1 ? c : c[0]
  }
})("audiojs", "audiojsInstance", this);


function add_marker_span() {
  if(validate_time_markers()) {
    let span_cnt =  parseInt($("#marker-div").data("markercount")) + 1;
    let min_val = $("#audio_marker_minute_main").val();
    let seconds_val = $("#audio_marker_seconds_main").val();
    let new_markup = '<span class="added-marker-span" id="add_marker_span_' + span_cnt + '"> <span class="time-marked">' + min_val + ' : ' + seconds_val + ' </span><input type="hidden" class="marker_minute_input" id="marker_minute_' + span_cnt + '" name="audio_marker_minute['+ span_cnt +']" value="' + min_val + '"><input type="hidden" id="marker_seconds_' + span_cnt + '" class="marker_seconds_input" name="audio_marker_seconds['+ span_cnt +']" value="' + seconds_val + '"><span class="mark-count">Mark' + span_cnt + '</span> <button onclick="remove_this(\'add_marker_span_' + span_cnt + '\',\'' + span_cnt + '\');" class="btn btn-danger">X</button></span>';
    if(span_cnt == 1) {
      $('#marker-div').slideDown();
    }
    $('#marker-div').append(new_markup);
    $("#marker-div").data("markercount",span_cnt);
    audiojs.settings.addMarkers([min_val + '.' + seconds_val], span_cnt);
    $("#audio_marker_minute_main").val("");
    $("#audio_marker_seconds_main").val("");
  }
};

function remove_this(el_id,el_cnt) {
  $('#' + el_id).remove();
  $('.highlighter-' + el_cnt).remove();
}

function slice_timemarker(el_id) {
  if($('#'+el_id).val() > 59) {
    alert('Value cannot be greater than 59..!!');
    $('#'+el_id).val('00');
    return false;
  }
  if ($('#'+el_id).val().length > 2) {
    $('#'+el_id).val($('#'+el_id).val().slice(0, 2));
  }
  if($('#'+el_id).val().length == 1) {
    $('#'+el_id).val($('#'+el_id).val() + '0');
  };
  if($('#'+el_id).val().length == 0) {
    $('#'+el_id).val('00');
  };
}

function validate_time_markers() {
  //additional validation added by Jitendra on 07/08/21 for marker points validation
  if ($('.add-marker-span').length > 0) {
    let audio_duration = parseFloat($("#current_audio")[0].duration);
    let duration_minute = Math.floor(audio_duration / 60);
    let total_time = 0;
    let min_val = $("#audio_marker_minute_main").val();
    let seconds_val = $("#audio_marker_seconds_main").val();
    if(min_val == "" || min_val == null) {
      if(seconds_val == "" || seconds_val == null) {
        // alert("Minute and seconds value cannot be blank..!!");
        Swal.fire({
          // icon: 'error',
          // text: 'Highlighter already added at ' + check_min_val + ':' + check_sec_val,
          title: "Minute and seconds value cannot be blank..!!",
        });
        return false;
      } else {
        $("#audio_marker_minute_main").val('00');
        min_val = '00';
        // alert("Minute value cannot be blank..!!");
        // Swal.fire({
        //   icon: 'error',
        //   // text: 'Highlighter already added at ' + check_min_val + ':' + check_sec_val,
        //   title: "Minute value cannot be blank..!!",
        // });
        // $("#audio_marker_seconds_main").val("00");
      }
    } else {
      if(seconds_val == "" || seconds_val == null) {
        // alert("Seconds value cannot be blank..!!");
        $("#audio_marker_seconds_main").val("00");
        seconds_val = "00";
        // return false;
      }
    }
    if(parseInt(min_val) == 0 && parseInt(seconds_val) == 0) {
      Swal.fire({
        // icon: 'error',
        // text: 'Highlighter already added at ' + check_min_val + ':' + check_sec_val,
        title: "Cannot add highlighter at 00:00 ..!!",
      });
      return false;
    }

    //check minute value
    if (min_val > duration_minute) {
      // alert("Value cannot be greater than " + duration_minute + "..!!");
      Swal.fire({
        // icon: 'error',
        // text: 'Highlighter already added at ' + check_min_val + ':' + check_sec_val,
        title: "Minute value cannot be greater than " + duration_minute + "..!!",
      });
      $('#audio_marker_minute_main').val("");
      $('#audio_marker_minute_main').focus();
      return false;
    }

    //check audio duration and highlighter position
    total_time = parseFloat(min_val*60) + parseFloat(seconds_val);
    if(total_time > audio_duration) {
      // alert("Highlighter time cannot be greater than audio duration..!!");
      Swal.fire({
        // icon: 'error',
        // text: 'Highlighter already added at ' + check_min_val + ':' + check_sec_val,
        title: 'Highlighter time cannot be greater than audio duration..!!',
      });
      $('#audio_marker_seconds_main').focus();
      return false;
    }

    //check if marker already exists
    if($('.marker_minute_input').length > 0) {
      let custom_cnt = 1;
      let check_min_val = check_sec_val = 0;
      let check_flag = true;
      $('.marker_minute_input').each(function() {
        check_min_val = $('#marker_minute_' + custom_cnt).val();
        check_sec_val = $('#marker_seconds_' + custom_cnt).val();
        if(min_val == parseInt(check_min_val) && seconds_val == parseInt(check_sec_val)) {
          // alert("Highlighter already added at " + check_min_val + ':' + check_sec_val);
          Swal.fire({
            // icon: 'error',
            // text: 'Highlighter already added at ' + check_min_val + ':' + check_sec_val,
            title: 'Highlighter already added at ' + check_min_val + ':' + check_sec_val,
          });
          check_flag = false;
        }
      });
      if(!check_flag) {
        return false;
      }
    }
    return true;
  } else {
    return true;
  }
}
// document.addEventListener('contextmenu', event => event.preventDefault());